SET session_replication_role = 'replica';

-- Account
CREATE TYPE SEX_TYPE AS ENUM ('man', 'woman');

CREATE TABLE IF NOT EXISTS accounts
(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 1 START 100), -- GENERATED ALWAYS AS IDENTITY
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP,
    login VARCHAR(100) NOT NULL,
    password CHAR(60) NOT NULL,
    first_name VARCHAR(100),
    father_name VARCHAR(100),
    last_name VARCHAR(100),
    sex SEX_TYPE,
    photo VARCHAR(100),
    birthday DATE,
    language VARCHAR(2),
    country VARCHAR(2),
    PRIMARY KEY (id),
    UNIQUE (login)
);
CREATE INDEX idx_accounts_login ON accounts(login);

CREATE TABLE IF NOT EXISTS account_files
(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 1 START 100), -- GENERATED ALWAYS AS IDENTITY
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    account_id BIGINT NOT NULL,
    name VARCHAR(100) NOT NULL,
    description VARCHAR(255),
    PRIMARY KEY (id),
    FOREIGN KEY (account_id) REFERENCES accounts(id)
);
CREATE INDEX idx_files_name ON account_files(name);

CREATE TYPE CONTACT_TYPE AS ENUM ('personal', 'work', 'other');

CREATE TABLE IF NOT EXISTS account_emails
(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 1 START 100), -- GENERATED ALWAYS AS IDENTITY
    account_id BIGINT NOT NULL,
    type CONTACT_TYPE NOT NULL,
    email VARCHAR(255) NOT NULL,
    verified BOOLEAN DEFAULT 'false',
    open BOOLEAN DEFAULT 'false',
    PRIMARY KEY (id),
    FOREIGN KEY (account_id) REFERENCES accounts(id),
    UNIQUE (account_id, email)
);
CREATE INDEX idx_emails_email ON account_emails(email);

CREATE TABLE IF NOT EXISTS account_phones
(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 1 START 100), -- GENERATED ALWAYS AS IDENTITY
    account_id BIGINT NOT NULL,
    type CONTACT_TYPE NOT NULL,
    code VARCHAR(20) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    verified BOOLEAN DEFAULT 'false',
    open BOOLEAN DEFAULT 'false',
    PRIMARY KEY (id),
    FOREIGN KEY (account_id) REFERENCES accounts(id),
    UNIQUE (account_id, code, phone)
);

CREATE TABLE IF NOT EXISTS account_addresses
(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 1 START 100), -- GENERATED ALWAYS AS IDENTITY
    account_id BIGINT NOT NULL,
    type CONTACT_TYPE NOT NULL,
    city_id BIGINT NOT NULL,
    address VARCHAR(255) NOT NULL,
    open BOOLEAN DEFAULT 'false',
    PRIMARY KEY (id),
    FOREIGN KEY (account_id) REFERENCES accounts(id),
    CHECK (city_id > 0)
);

CREATE TYPE SPEAKING_LEVEL AS ENUM ('a1', 'a2', 'b1', 'b2', 'c1', 'c2');
CREATE TABLE IF NOT EXISTS account_languages
(
    account_id BIGINT NOT NULL,
    language VARCHAR(2),
    level SPEAKING_LEVEL,
    PRIMARY KEY (account_id, language),
    FOREIGN KEY (account_id) REFERENCES accounts(id)
);

-- Patient profile
CREATE TYPE BODY_TYPE AS ENUM ('ectomorph', 'mesomorph', 'endomorph', 'other');
CREATE TYPE BLOOD_TYPE AS ENUM ('A', 'B', 'AB', 'O');
CREATE TABLE IF NOT EXISTS patient_profiles
(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 1 START 100), -- GENERATED ALWAYS AS IDENTITY
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    account_id BIGINT NOT NULL,
    phone_id BIGINT,
    email_id BIGINT,
    height DECIMAL(5,2),
    weight DECIMAL(6,3),
    body_type BODY_TYPE,
    blood_type BLOOD_TYPE,
    rh BOOLEAN,
    left_eye DECIMAL(3,1),
    right_eye DECIMAL(3,1),
    disability_group VARCHAR(1),
    disability_reason VARCHAR(255),
    disability_document_num VARCHAR(100),
    activity VARCHAR(255),
    nutrition VARCHAR(255),
    work VARCHAR(255),
    PRIMARY KEY (id),
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE,
    FOREIGN KEY (phone_id) REFERENCES account_phones(id) ON DELETE SET NULL,
    FOREIGN KEY (email_id) REFERENCES account_emails(id) ON DELETE SET NULL,
    CHECK (height >= 10 AND height <= 300),
    CHECK (weight > 0 AND weight <= 600),
    CHECK (left_eye >= -40 AND left_eye <= 10),
    CHECK (right_eye >= -40 AND right_eye <= 10)
);

CREATE TABLE IF NOT EXISTS accounts_patient_profiles
(
    account_id BIGINT NOT NULL,
    patient_profile_id BIGINT NOT NULL,
    permission_edit BOOLEAN DEFAULT 'false',
    verified BOOLEAN DEFAULT 'false',
    PRIMARY KEY (account_id, patient_profile_id),
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE,
    FOREIGN KEY (patient_profile_id) REFERENCES patient_profiles(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS patient_disability_files
(
    profile_id BIGINT NOT NULL,
    file_id BIGINT NOT NULL,
    PRIMARY KEY (profile_id, file_id),
    FOREIGN KEY (profile_id) REFERENCES patient_profiles(id) ON DELETE CASCADE,
    FOREIGN KEY (file_id) REFERENCES account_files(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS patient_metal_components
(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 1 START 100), -- GENERATED ALWAYS AS IDENTITY
    profile_id BIGINT NOT NULL,
    metal VARCHAR(100),
    organ_id SMALLINT NOT NULL,
    description VARCHAR(255),
    PRIMARY KEY (id),
    FOREIGN KEY (profile_id) REFERENCES patient_profiles(id) ON DELETE CASCADE,
    CHECK (organ_id > 0)
);

-- Specialist profile
CREATE TYPE MEDICAL_CATEGORY_TYPE AS ENUM ('0', '1', '2', '3');
CREATE TABLE IF NOT EXISTS specialist_profiles
(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 1 START 100), -- GENERATED ALWAYS AS IDENTITY
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    account_id BIGINT NOT NULL,
    phone_id BIGINT,
    email_id BIGINT,
    about TEXT,
    medical_category MEDICAL_CATEGORY_TYPE,
    treats_adults BOOLEAN DEFAULT 'false',
    treats_children BOOLEAN DEFAULT 'false',
    PRIMARY KEY (id),
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE,
    FOREIGN KEY (phone_id) REFERENCES account_phones(id) ON DELETE SET NULL,
    FOREIGN KEY (email_id) REFERENCES account_emails(id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS specialist_specializations
(
    profile_id BIGINT NOT NULL,
    specialization_id SMALLINT NOT NULL,
    start DATE NOT NULL,
    PRIMARY KEY (profile_id, specialization_id),
    FOREIGN KEY (profile_id) REFERENCES specialist_profiles(id) ON DELETE CASCADE,
    CHECK (specialization_id > 0)
);

CREATE TABLE IF NOT EXISTS specialist_cures_diseases
(
    profile_id BIGINT NOT NULL,
    disease_id SMALLINT NOT NULL,
    PRIMARY KEY (profile_id, disease_id),
    FOREIGN KEY (profile_id) REFERENCES specialist_profiles(id) ON DELETE CASCADE,
    CHECK (disease_id > 0)
);

CREATE TABLE IF NOT EXISTS specialist_services
(
    profile_id BIGINT NOT NULL,
    service_id SMALLINT NOT NULL,
    PRIMARY KEY (profile_id, service_id),
    FOREIGN KEY (profile_id) REFERENCES specialist_profiles(id) ON DELETE CASCADE,
    CHECK (service_id > 0)
);

CREATE TABLE IF NOT EXISTS specialist_educations
(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 1 START 100), -- GENERATED ALWAYS AS IDENTITY
    profile_id BIGINT NOT NULL,
    institution_id SMALLINT NOT NULL,
    faculty_id SMALLINT,
    department_id SMALLINT,
    form_id SMALLINT,
    degree_id SMALLINT,
    graduation DATE NOT NULL,
    verified BOOLEAN DEFAULT 'false',
    PRIMARY KEY (id),
    FOREIGN KEY (profile_id) REFERENCES specialist_profiles(id) ON DELETE CASCADE,
    CHECK (institution_id > 0),
    CHECK (faculty_id > 0),
    CHECK (department_id > 0),
    CHECK (form_id > 0),
    CHECK (degree_id > 0)
);

CREATE TABLE IF NOT EXISTS specialist_education_files
(
    education_id BIGINT NOT NULL,
    file_id BIGINT NOT NULL,
    PRIMARY KEY (education_id, file_id),
    FOREIGN KEY (education_id) REFERENCES specialist_educations(id) ON DELETE CASCADE,
    FOREIGN KEY (file_id) REFERENCES account_files(id) ON DELETE CASCADE
);

-- CREATE TABLE IF NOT EXISTS specialist_educational_courses
-- (
--     id BIGINT GENERATED ALWAYS AS IDENTITY,
--     profile_id BIGINT NOT NULL,
--     course_id BIGINT,
--     name VARCHAR(255) NOT NULL,
--     institution_id SMALLINT,
--     institution_name VARCHAR(100),
--     form_id SMALLINT,
--     graduation DATE NOT NULL,
--     verified BOOLEAN DEFAULT 'false',
--     PRIMARY KEY (id),
--     FOREIGN KEY (profile_id) REFERENCES specialist_profiles(id) ON DELETE CASCADE,
--     CHECK (course_id > 0),
--     CHECK (institution_id > 0),
--     CHECK (form_id > 0)
-- );
--
-- CREATE TABLE IF NOT EXISTS specialist_educational_course_files
-- (
--     educational_course_id BIGINT NOT NULL,
--     file_id BIGINT NOT NULL,
--     PRIMARY KEY (educational_course_id, file_id),
--     FOREIGN KEY (educational_course_id) REFERENCES specialist_educational_courses(id) ON DELETE CASCADE,
--     FOREIGN KEY (file_id) REFERENCES account_files(id) ON DELETE CASCADE
-- );

-- CREATE TYPE LICENCE_STATUS AS ENUM ('active', 'closed');
-- CREATE TABLE IF NOT EXISTS specialist_licences
-- (
--     id BIGINT GENERATED ALWAYS AS IDENTITY,
--     profile_id BIGINT NOT NULL,
--     number VARCHAR(100) NOT NULL,
--     status LICENCE_STATUS NOT NULL,
--     full_name VARCHAR(255) NOT NULL,
--     practice VARCHAR(255) NOT NULL,
--     PRIMARY KEY (id),
--     FOREIGN KEY (profile_id) REFERENCES specialist_profiles(id) ON DELETE CASCADE,
--     UNIQUE (number)
-- );

CREATE TABLE IF NOT EXISTS specialist_experiences
(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 1 START 100), -- GENERATED ALWAYS AS IDENTITY
    profile_id BIGINT NOT NULL,
    company_id BIGINT,
    company VARCHAR(255) NOT NULL,
    start DATE NOT NULL,
    finish DATE,
    PRIMARY KEY (id),
    FOREIGN KEY (profile_id) REFERENCES specialist_profiles(id) ON DELETE CASCADE,
    CHECK (company_id > 0)
);

CREATE TABLE IF NOT EXISTS specialist_experience_specializations
(
    experience_id BIGINT NOT NULL,
    specialization_id SMALLINT NOT NULL,
    PRIMARY KEY (experience_id, specialization_id),
    FOREIGN KEY (experience_id) REFERENCES specialist_experiences(id) ON DELETE CASCADE,
    CHECK (specialization_id > 0)
);

CREATE TABLE IF NOT EXISTS specialist_associations
(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 1 START 100), -- GENERATED ALWAYS AS IDENTITY
    profile_id BIGINT NOT NULL,
    association_id BIGINT,
    name VARCHAR(255) NOT NULL,
    job_title VARCHAR(255),
    PRIMARY KEY (id),
    FOREIGN KEY (profile_id) REFERENCES specialist_profiles(id) ON DELETE CASCADE,
    CHECK (association_id > 0)
);

CREATE TABLE IF NOT EXISTS specialist_patents
(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 1 START 100), -- GENERATED ALWAYS AS IDENTITY
    profile_id BIGINT NOT NULL,
    number VARCHAR(100) NOT NULL,
    name VARCHAR(255) NOT NULL,
    link VARCHAR(255),
    PRIMARY KEY (id),
    FOREIGN KEY (profile_id) REFERENCES specialist_profiles(id) ON DELETE CASCADE,
    UNIQUE (profile_id, number)
);

CREATE TABLE IF NOT EXISTS specialist_publication_links
(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY (INCREMENT BY 1 START 100), -- GENERATED ALWAYS AS IDENTITY
    profile_id BIGINT NOT NULL,
    title VARCHAR(255) NOT NULL,
    link VARCHAR(255) NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (profile_id) REFERENCES specialist_profiles(id) ON DELETE CASCADE,
    UNIQUE (profile_id, link)
);

SET session_replication_role = 'origin';